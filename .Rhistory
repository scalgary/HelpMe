geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy")
inputData <- read_csv(file = inputFile, locale = readr::locale(encoding = "latin1"))
%>% select(Driver,TB0,Category)
inputData <- read_csv(file = inputFile, locale = readr::locale(encoding = "latin1"))
%>% select(Driver,TB0,Category)
inputData <- read_csv(file = inputFile, locale = readr::locale(encoding = "latin1")) %>%
select(Driver,TB0,Category)
ggplot(inputData, aes(x = inputData[, j], y = inputData[, j + nbbrand])) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy")
j<- 2
nbbrand <- 1
ggplot(inputData, aes(x = inputData[, j], y = inputData[, j + nbbrand])) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
)
ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
)
inputData[, 2]
inputData <- read_csv(file = inputFile, locale = readr::locale(encoding = "latin1")) %>%
select(Driver,TB0,Category) %>% as.tibble()
inputData <- read_csv(file = inputFile, locale = readr::locale(encoding = "latin1")) %>%
select(Driver,TB0,Category) %>% as_tibble()
ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
)
names(inputData)
ggplot(inputData, aes(x = inputData[, "TB0"], y = inputData[, "Category"]))
ggplot(inputData, aes(x = inputData[["TB0"]], y = inputData[["Category"]]))
ggplot(inputData, aes(x = inputData[["TB0"]], y = inputData[["Category"]])) +
geom_rect(
aes(xmin = mean(inputData[["TB0"]]), xmax = Inf,
ymin = mean(inputData[["Category"]]), ymax = Inf),
fill = "mediumseagreen"
)
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[["Driver"]]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
)
inputData <- read.csv(file = inputFile, encoding = "latin1") %>%
select(Driver,TB0,Category)
ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
install.packages("hrbrthemes")
library(hrbrthemes)
library(ggplot2)
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
+ theme_ipsum()+
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme_ipsum() +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(base_family = "serif") +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(base_family = "") +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
inputData <- read.csv(file = inputFile, encoding = "latin1") %>%
select(Driver,TB0,Category)
j<- 2
nbbrand <- 1
library(ggplot2)
library(extrafont)
loadfonts(device = "win")
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(text=element_text(size=16,  family="Comic Sans MS")) +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
windows()
myFont1 <- "Montserrat"
myFont2 <- "Roboto"
myFont3 <- "Palatino"
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(text=element_text(size=16,  family=myFont2)) +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(text=element_text(family="mono"))
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(text=element_text(family="mono")) +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
rm(list=ls())
library(devtools)
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::build()
devtools::install()
detach("package:HelpMe", unload = TRUE)
detach("package:HelpMe", unload = TRUE)
devtools::install()
install.packages("~/SAS_MS/HelpMe_3.2.0.tar.gz", repos = NULL, type = "source")
remove.packages("HelpMe")
install.packages("~/SAS_MS/HelpMe_3.2.0.tar.gz", repos = NULL, type = "source")
devtools::install()
library(HelpMe)
myplots <- run_quadmap("J:\\sas_ms\\22-071458-02\\H2\\AR1_2\\quadmap.csv",max.overlaps = Inf)
myplots
save_quadmap_mypptx(myplots,file.path("C:\\Users\\Sandrine.Lebon01\\MAIN\\usatibn\\AR1_2","test.pptx"))
devtools::load_all()
devtools::build()
remove.packages("HelpMe")
install.packages("~/SAS_MS/HelpMe_3.2.0.tar.gz", repos = NULL, type = "source")
devtools::install()
library(HelpMe)
myplots <- run_quadmap("J:\\sas_ms\\22-071458-02\\H2\\AR1_2\\quadmap.csv",max.overlaps = Inf)
save_quadmap_mypptx(myplots,file.path("C:\\Users\\Sandrine.Lebon01\\MAIN\\usatibn\\AR1_2","test2.pptx"))
getwd()
#' Title
#'
#' @param file_csv file name or could be path
#' @param folder path for file name
#' @param isHE is it an HE
#' @param masterbrand masterbrand pour HE
#' @param force argument pour ggrepel
#' @param max.overlaps argument pour ggrepel
#'
#' @return
#' @export
#'
#' @examples
run_quadmap <- function(file_csv, folder= NULL, isHE = FALSE, TBdetail = "T2B",
masterbrand = NULL, force = 10, max.overlaps = 10){
df <- read.file(file_csv, folder)
df_list <- split_data_frame(df)
plots <- lapply(df_list, function(df) myplot_quadmap(df, isHE, masterbrand, force, TBdetail,max.overlaps ))
# Set the names of the list elements based on the last column of each dataframe
plots <- stats::setNames(plots, sapply(df_list, function(df) utils::tail(names(df), n = 1)))
return(plots)
}
run_quadmap_BG <- function(file_csv, folder= NULL, isHE = FALSE, TBdetail = "T2B",
masterbrand = NULL, force = 10, max.overlaps = 10){
df <- read.file(file_csv, folder)
df_list <- split_data_frame(df)
plots <- lapply(df_list, function(df) myplot_quadmap_BG(df, isHE, masterbrand, force, TBdetail,max.overlaps ))
# Set the names of the list elements based on the last column of each dataframe
plots <- stats::setNames(plots, sapply(df_list, function(df) utils::tail(names(df), n = 1)))
return(plots)
}
library(devtools)
rm(list=ls())
library(devtools)
devtools::load_all()
devtools::document()
devtools::check()
devtools::build()
