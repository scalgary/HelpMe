devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
#' Create CA object from file
#' @noRd
#' @param df
#' @param title
#' @param row.sup
#' @param graph
#' @param ncp
#' @param col.sup
#'
#' @return
#'
#'
#' @examples
create_CA_from_df<- function(df,title = NULL, row.sup = NULL, col.sup = NULL, graph = FALSE, ncp = 2) {
mapdata <- as.data.frame(df[,-1], row.names = df[,1])
result_ca <- CA(mapdata, row.sup = row.sup, col.sup = col.sup, graph = graph, ncp = ncp)
if (is.null(title)) {title <- deparse(substitute(df))}
result_ca$title <- title
return(result_ca)
}
#' Create CA object
#' @description
#' Create a CA object leveraging the function CA from the package FactoMiner
#' By using row.sup and col.sup, we can exclude some row or column from the analysis
#'
#'
#' @param file_csv csv file
#' @param folder default working directory
#' @param title default name of the file
#' @param row.sup if row.sup= 1 remove first line
#' @param graph plot the CA graph from factominer
#' @param ncp default is 2
#' @param col.sup if col.sup=5 means don't use 5th column
#' @author Leverage Factominer package
#' @return Object class CA
#' @export
#'
#' @examples
#' file_csv <- system.file(package = "HelpMe", "extdata/child_red.csv")
#' ##data_map <- read.csv(file_csv) if you want to check your file in R
#' result.ca <- HelpMe::create_CA(file_csv, folder = NULL)
#' ## Use first row and 4th column as supplementary informations -
#' result.ca.1 <- HelpMe::create_CA(file_csv, folder = NULL, title = "mytitle",row.sup =1, col.sup=4)
#' ## HelpMe::export_CA(result.ca.1) #if you want to export the result
#' if (HelpMe::check_pptx.CA()) { save_plot_pptx(result.ca, "mypptx.pptx")}
create_CA <- function(file_csv, folder = NULL,title = NULL,
row.sup = NULL, col.sup = NULL, graph = TRUE, ncp = 2) {
df <- read.file(file_csv =file_csv, folder= folder)
df <- light.cleaning.names(df)
#check mapdata
check = check_dataframe(df)
if (is.null(title)) {title <- sub(".csv", "", basename(file_csv))}
result_ca <- create_CA_from_df(df, title, row.sup, col.sup, graph, ncp )
}
#' Export the resultat of create_CA
#' save the coordonnates and the data used to run the CA as csv files
#' @param res.ca object de class CA
#' @param folder path
#'
#' @return
#' @export
#' @author
#' @examples
#' ## result.ca <- HelpMe::create_CA(file_csv, folder = NULL)
#' ## HelpMe::export.CA(result.ca, "output") if output folder exists!
#'
export_CA <- function(res.ca, folder =NULL, rdssaved = FALSE){
if (!inherits(res.ca, "CA")) stop("non convenient data")
#
if (is.null(folder)) {
if (rdssaved) {rds_path <- paste0(res.ca$title,".rds")}
coord_path <- paste0(res.ca$title,"_coord.csv")
data_path <- paste0(res.ca$title,"_data.csv")
} else {
if (!(dir.exists(folder))) {stop("The folder doesn't exist")}
if (rdssaved) {rds_path <- file.path(folder,paste0(res.ca$title,".rds"))}
coord_path <- file.path(folder,paste0(res.ca$title,"_coord.csv"))
data_path <- file.path(folder,paste0(res.ca$title,"_data.csv"))
}
#useful if the first row of data is empty or contains total
#default will be save in working directory
#Robject saved
if (rdssaved) {saveRDS(res.ca, rds_path)}
#save coordonnates CA
write.csv(res.ca$PM_coord,coord_path, row.names = TRUE)
#save data used for CA
write.csv(res.ca$call$Xtot, data_path, row.names = TRUE)
}
library("devtools")
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
#' Create CA object from file
#' @noRd
#' @param df
#' @param title
#' @param row.sup
#' @param graph
#' @param ncp
#' @param col.sup
#'
#' @return
#'
#'
#' @examples
create_CA_from_df<- function(df,title = NULL, row.sup = NULL, col.sup = NULL, graph = FALSE, ncp = 2) {
mapdata <- as.data.frame(df[,-1], row.names = df[,1])
result_ca <- CA(mapdata, row.sup = row.sup, col.sup = col.sup, graph = graph, ncp = ncp)
if (is.null(title)) {title <- deparse(substitute(df))}
result_ca$title <- title
return(result_ca)
}
#' Create CA object
#' @description
#' Create a CA object leveraging the function CA from the package FactoMiner
#' By using row.sup and col.sup, we can exclude some row or column from the analysis
#'
#'
#' @param file_csv csv file
#' @param folder default working directory
#' @param title default name of the file
#' @param row.sup if row.sup= 1 remove first line
#' @param graph plot the CA graph from factominer
#' @param ncp default is 2
#' @param col.sup if col.sup=5 means don't use 5th column
#' @author Leverage Factominer package
#' @return Object class CA
#' @export
#'
#' @examples
#' file_csv <- system.file(package = "HelpMe", "extdata/child_red.csv")
#' ##data_map <- read.csv(file_csv) if you want to check your file in R
#' result.ca <- HelpMe::create_CA(file_csv, folder = NULL)
#' ## Use first row and 4th column as supplementary informations -
#' result.ca.1 <- HelpMe::create_CA(file_csv, folder = NULL, title = "mytitle",row.sup =1, col.sup=4)
#' ## HelpMe::export_CA(result.ca.1) #if you want to export the result
#' if (HelpMe::check_pptx.CA()) { save_plot_pptx(result.ca, "mypptx.pptx")}
create_CA <- function(file_csv, folder = NULL,title = NULL,
row.sup = NULL, col.sup = NULL, graph = TRUE, ncp = 2) {
df <- read.file(file_csv =file_csv, folder= folder)
df <- light.cleaning.names(df)
#check mapdata
check = check_dataframe(df)
if (is.null(title)) {title <- sub(".csv", "", basename(file_csv))}
result_ca <- create_CA_from_df(df, title, row.sup, col.sup, graph, ncp )
}
#' Export the resultat of create_CA
#' save the coordonnates and the data used to run the CA as csv files
#' @param res.ca object de class CA
#' @param folder path
#'
#' @return
#' @export
#' @author
#' @examples
#' ## result.ca <- HelpMe::create_CA(file_csv, folder = NULL)
#' ## HelpMe::export.CA(result.ca, "output") if output folder exists!
#'
export_CA <- function(res.ca, folder =NULL, rdssaved = FALSE){
if (!inherits(res.ca, "CA")) stop("non convenient data")
#
if (is.null(folder)) {
if (rdssaved) {rds_path <- paste0(res.ca$title,".rds")}
coord_path <- paste0(res.ca$title,"_coord.csv")
data_path <- paste0(res.ca$title,"_data.csv")
} else {
if (!(dir.exists(folder))) {stop("The folder doesn't exist")}
if (rdssaved) {rds_path <- file.path(folder,paste0(res.ca$title,".rds"))}
coord_path <- file.path(folder,paste0(res.ca$title,"_coord.csv"))
data_path <- file.path(folder,paste0(res.ca$title,"_data.csv"))
}
#useful if the first row of data is empty or contains total
#default will be save in working directory
#Robject saved
if (rdssaved) {saveRDS(res.ca, rds_path)}
#save coordonnates CA
write.csv(res.ca$PM_coord,coord_path, row.names = TRUE)
#save data used for CA
write.csv(res.ca$call$Xtot, data_path, row.names = TRUE)
}
library(HelpMe)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
create_CA("child_red.csv")
setwd("~/SAS_MS/HelpMe/vignettes")
create_CA("child_red.csv")
export_CA(res.ca )
res.ca <- create_CA("child_red.csv")
export_CA(res.ca )
res.ca$eig
library("devtools")
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
setwd("~/SAS_MS/HelpMe")
library("devtools")
library("devtools")
usethis::use_vignette("How_to_Quadmap")
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
library("devtools")
load_all()
document()
check()
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
string <- "sample.pptx"
grepl("\\.pptx$", string)
library("devtools")
load_all()
setwd("I:\\SAS_MS\\23-006424-01\\maps")
setwd("I:\\SAS_MS\\23-006424-01\\maps")
rm(res.ca)
setwd("I:\\SAS_MS\\23-006424-01\\maps")
res.ca <- create_CA("germany_testSL.csv")
res.ca <- create_CA("germany.csv")
export_CA(res.ca, folder = "test")
if (check_pptx()) {save_CA_pptx(res.ca, "tes/germanytest")}
View(save_CA_pptx)
if (check_pptx()) {save_CA_pptx(res.ca, "test/germanytest")}
target = "test/germanytest"
string <- res.ca$title
mytitle <-  paste0(toupper(substr(string, 1, 1)), substr(string, 2, nchar(string)))
if (is.null(target)) { target <- paste0(res.ca$title,".pptx")}
target
(!(grepl("\\.pptx$", target)))
load_all()
##helper function to get 1 pptx with all the quadmaps
###export to pptx needs officer and rvg
library(officer)
library(rvg)
#mylist is a list of plots
save_quadmap_pptx <- function(mylist, target  ) {
#check if argumnet 1 is a list
if (!(inherits(mylist, "list"))) {stop("You need a list of plots")}
all_ggplot <- sapply(mylist, function(x) inherits(x, "ggplot"))
if (!(all(all_ggplot))) {
stop("Not all elements are of class ggplot.")
}
all_have_names <- !any(is.null(names(mylist)))
if (!(all_have_names)) {
stop("All elements should have names.")
}
init_pptx <- officer::read_pptx()  # Votre objet initial
add_slide_pptx <- function(doc_pptx, i, myplots = mylist) {
doc_pptx %>%
officer::add_slide(layout = "Title and Content", master = "Office Theme") %>%
officer::ph_with(names(myplots)[i], location= officer::ph_location_type(type = "title")) %>%
officer::ph_with(rvg::dml(ggobj = myplots[[i]]),
location=ph_location(width=7.35,height=4.65,left=1.22,top=1.80))
}
doc_pptx <- Reduce(add_slide_pptx, seq_along(mylist), init = init_pptx)
print(doc_pptx, target)
}
save_CA_pptx <- function(x, target, folder = NULL, max.overlaps = 10, usetemplate = FALSE){
res.ca <- x
if (!inherits(res.ca, "CA")) stop("non convenient data")
#mytitle <- paste0(res.ca$title," Inertia Explained"," (",format(res.ca$eig[2,"cumulative percentage of variance"],nsmall=2,digits=2),"%)",sep="")
string <- res.ca$title
mytitle <-  paste0(toupper(substr(string, 1, 1)), substr(string, 2, nchar(string)))
if (is.null(target)) { target <- paste0(res.ca$title,".pptx")}
#si user forgot pptx
if (!(grepl("\\.pptx$", target))) {target <- paste0(target,".pptx")}
if (usetemplate) {
doc_pptx <-officer::read_pptx(system.file(package = "HelpMe", "template/templateISC.pptx")) %>%
officer::add_slide(layout = "TitleContent", master = "Custom Design") %>%
officer::ph_with( mytitle, location= ph_location_label(ph_label = "Title 4")) %>%
officer::ph_with(rvg::dml(ggobj =  HelpMe:::plot_ISCA(res.ca, max.overlaps = max.overlaps)),
location=ph_location_label(ph_label = "Content Placeholder 2"))  %>%
officer::remove_slide(index = 1)
} else {
doc_pptx <- officer::read_pptx() %>%
officer::add_slide(layout = "Title and Content", master = "Office Theme") %>%
officer::ph_with(mytitle, location= officer::ph_location_type(type = "title")) %>%
officer::ph_with(rvg::dml(ggobj =  HelpMe:::plot_ISCA(res.ca,max.overlaps = max.overlaps)),
location=officer::ph_location_type(type="body"))
}
if (is.null(folder)) {
print(doc_pptx, target)}
else {print(doc_pptx, file.path(folder,target))}
}
setwd("I:\\SAS_MS\\23-006424-01\\maps")
rm(res.ca)
res.ca <- create_CA("germany.csv")
export_CA(res.ca, folder = "test")
if (check_pptx()) {save_CA_pptx(res.ca, "test/germanytest")}
if (check_pptx()) {save_CA_pptx(res.ca, "test/germanytest", usetemplate = TRUE)}
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
library(HelpMe)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(HelpMe)
res.ca <- HelpMe::create_CA("child_red.csv")
HelpMe::export_CA(res.ca)
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, "child_red.pptx")}
res.ca <- HelpMe::create_CA("child_red.csv", row.sup = 1, col.sup = 4, title = "MyCA")
dir.create("output")
HelpMe::export_CA(res.ca, "output")
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, target = "Mypptx.pptx", folder = "output", usetemplate = TRUE)}
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
myplots <- HelpMe::run_quadmap("dataquad.csv")
setwd("~/SAS_MS/HelpMe/vignettes")
myplots <- HelpMe::run_quadmap("dataquad.csv")
mylist <- myplots
#check if argumnet 1 is a list
if (!(inherits(mylist, "list"))) {stop("You need a list of plots")}
all_ggplot <- sapply(mylist, function(x) inherits(x, "ggplot"))
if (!(all(all_ggplot))) {
stop("Not all elements are of class ggplot.")
}
all_have_names <- !any(is.null(names(mylist)))
if (!(all_have_names)) {
stop("All elements should have names.")
}
init_pptx <- officer::read_pptx(system.file(package = "HelpMe", "template/templateGG.pptx"))
add_slide_pptx_template <- function(doc_pptx, i, myplots = mylist) {
doc_pptx %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with(names(myplots)[i], location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design")  %>%
officer::ph_with(names(myplots)[i], location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "TitleContent", master = "Custom Design") %>%
officer::ph_with(paste0(names(myplots)[i]," - Leveraging  Strengths and Weaknesses")
, location= ph_location_label(ph_label = "Title 4")) %>%
officer::ph_with(rvg::dml(ggobj = myplots[[i]]),
location=ph_location_label(ph_label = "Content Placeholder 2"))
}
result <- Reduce(add_slide_pptx_template, seq_along(mylist), init = init_pptx)
result <- result %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with("Appendix", location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with("Appendix", location= ph_location_label(ph_label = "Title 4"))
getwd()
target <- "test.pptx"
print(result, target)
##helper function to get 1 pptx with all the quadmaps
###export to pptx needs officer and rvg
library(officer)
library(rvg)
#mylist is a list of plots
save_quadmap_pptx <- function(mylist, target  ) {
#check if argumnet 1 is a list
if (!(inherits(mylist, "list"))) {stop("You need a list of plots")}
all_ggplot <- sapply(mylist, function(x) inherits(x, "ggplot"))
if (!(all(all_ggplot))) {
stop("Not all elements are of class ggplot.")
}
all_have_names <- !any(is.null(names(mylist)))
if (!(all_have_names)) {
stop("All elements should have names.")
}
init_pptx <- officer::read_pptx()  # Votre objet initial
add_slide_pptx <- function(doc_pptx, i, myplots = mylist) {
doc_pptx %>%
officer::add_slide(layout = "Title and Content", master = "Office Theme") %>%
officer::ph_with(names(myplots)[i], location= officer::ph_location_type(type = "title")) %>%
officer::ph_with(rvg::dml(ggobj = myplots[[i]]),
location=ph_location(width=7.35,height=4.65,left=1.22,top=1.80))
}
doc_pptx <- Reduce(add_slide_pptx, seq_along(mylist), init = init_pptx)
print(doc_pptx, target)
}
save_CA_pptx <- function(x, target, folder = NULL, max.overlaps = 10, usetemplate = FALSE){
res.ca <- x
if (!inherits(res.ca, "CA")) stop("non convenient data")
#mytitle <- paste0(res.ca$title," Inertia Explained"," (",format(res.ca$eig[2,"cumulative percentage of variance"],nsmall=2,digits=2),"%)",sep="")
string <- res.ca$title
mytitle <-  paste0(toupper(substr(string, 1, 1)), substr(string, 2, nchar(string)))
if (is.null(target)) { target <- paste0(res.ca$title,".pptx")}
#si user forgot pptx
if (!(grepl("\\.pptx$", target))) {target <- paste0(target,".pptx")}
if (usetemplate) {
doc_pptx <-officer::read_pptx(system.file(package = "HelpMe", "template/templateISC.pptx")) %>%
officer::add_slide(layout = "TitleContent", master = "Custom Design") %>%
officer::ph_with( mytitle, location= ph_location_label(ph_label = "Title 4")) %>%
officer::ph_with(rvg::dml(ggobj =  HelpMe:::plot_ISCA(res.ca, max.overlaps = max.overlaps)),
location=ph_location_label(ph_label = "Content Placeholder 2"))  %>%
officer::remove_slide(index = 1)
} else {
doc_pptx <- officer::read_pptx() %>%
officer::add_slide(layout = "Title and Content", master = "Office Theme") %>%
officer::ph_with(mytitle, location= officer::ph_location_type(type = "title")) %>%
officer::ph_with(rvg::dml(ggobj =  HelpMe:::plot_ISCA(res.ca,max.overlaps = max.overlaps)),
location=officer::ph_location_type(type="body"))
}
if (is.null(folder)) {
print(doc_pptx, target)}
else {print(doc_pptx, file.path(folder,target))}
}
#mylist is a list of plots
save_quadmap_pptx_SL <- function(mylist, target, folder = NULL) {
#check if argumnet 1 is a list
if (!(inherits(mylist, "list"))) {stop("You need a list of plots")}
all_ggplot <- sapply(mylist, function(x) inherits(x, "ggplot"))
if (!(all(all_ggplot))) {
stop("Not all elements are of class ggplot.")
}
all_have_names <- !any(is.null(names(mylist)))
if (!(all_have_names)) {
stop("All elements should have names.")
}
init_pptx <- officer::read_pptx(system.file(package = "HelpMe", "template/templateGG.pptx"))
add_slide_pptx_template <- function(doc_pptx, i, myplots = mylist) {
doc_pptx %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with(names(myplots)[i], location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design")  %>%
officer::ph_with(names(myplots)[i], location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "TitleContent", master = "Custom Design") %>%
officer::ph_with(paste0(names(myplots)[i]," - Leveraging  Strengths and Weaknesses")
, location= ph_location_label(ph_label = "Title 4")) %>%
officer::ph_with(rvg::dml(ggobj = myplots[[i]]),
location=ph_location_label(ph_label = "Content Placeholder 2"))
}
# Votre objet initial
result <- Reduce(add_slide_pptx_template, seq_along(mylist), init = init_pptx)
result <- result %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with("Appendix", location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with("Appendix", location= ph_location_label(ph_label = "Title 4"))
if (!(grepl("\\.pptx$", target))) {target <- paste0(target,".pptx")}
if (is.null(folder)) {
print(result, target)}
else {print(result, file.path(folder,target))}
}
setwd("~/SAS_MS/HelpMe/vignettes")
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 6)
View(myplots)
myplots
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 6, max.overlaps = 15)
myplots
save_quadmap_pptx_SL(myplots,"myquadmap.pptx")
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 10, max.overlaps = 15)
save_quadmap_pptx_SL(myplots,"myquadmap2.pptx")
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 6, max.overlaps = 10)
save_quadmap_pptx_SL(myplots,"myquadmap2.pptx")
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 6, max.overlaps =5)
save_quadmap_pptx_SL(myplots,"myquadmap2.pptx")
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 6, max.overlaps =7)
save_quadmap_pptx_SL(myplots,"myquadmap2.pptx")
file.path(Sys.getenv("HOME"), ".Rprofile")
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
library("devtools")
load_all()
document()
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
build()
install.packages("~/SAS_MS/HelpMe_2.1.5.tar.gz", repos = NULL, type = "source")
library(HelpMe)
View(save_quadmap_pptx)
