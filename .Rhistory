load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
library("devtools")
load_all()
document()
check()
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
string <- "sample.pptx"
grepl("\\.pptx$", string)
library("devtools")
load_all()
setwd("I:\\SAS_MS\\23-006424-01\\maps")
setwd("I:\\SAS_MS\\23-006424-01\\maps")
rm(res.ca)
setwd("I:\\SAS_MS\\23-006424-01\\maps")
res.ca <- create_CA("germany_testSL.csv")
res.ca <- create_CA("germany.csv")
export_CA(res.ca, folder = "test")
if (check_pptx()) {save_CA_pptx(res.ca, "tes/germanytest")}
View(save_CA_pptx)
if (check_pptx()) {save_CA_pptx(res.ca, "test/germanytest")}
target = "test/germanytest"
string <- res.ca$title
mytitle <-  paste0(toupper(substr(string, 1, 1)), substr(string, 2, nchar(string)))
if (is.null(target)) { target <- paste0(res.ca$title,".pptx")}
target
(!(grepl("\\.pptx$", target)))
load_all()
##helper function to get 1 pptx with all the quadmaps
###export to pptx needs officer and rvg
library(officer)
library(rvg)
#mylist is a list of plots
save_quadmap_pptx <- function(mylist, target  ) {
#check if argumnet 1 is a list
if (!(inherits(mylist, "list"))) {stop("You need a list of plots")}
all_ggplot <- sapply(mylist, function(x) inherits(x, "ggplot"))
if (!(all(all_ggplot))) {
stop("Not all elements are of class ggplot.")
}
all_have_names <- !any(is.null(names(mylist)))
if (!(all_have_names)) {
stop("All elements should have names.")
}
init_pptx <- officer::read_pptx()  # Votre objet initial
add_slide_pptx <- function(doc_pptx, i, myplots = mylist) {
doc_pptx %>%
officer::add_slide(layout = "Title and Content", master = "Office Theme") %>%
officer::ph_with(names(myplots)[i], location= officer::ph_location_type(type = "title")) %>%
officer::ph_with(rvg::dml(ggobj = myplots[[i]]),
location=ph_location(width=7.35,height=4.65,left=1.22,top=1.80))
}
doc_pptx <- Reduce(add_slide_pptx, seq_along(mylist), init = init_pptx)
print(doc_pptx, target)
}
save_CA_pptx <- function(x, target, folder = NULL, max.overlaps = 10, usetemplate = FALSE){
res.ca <- x
if (!inherits(res.ca, "CA")) stop("non convenient data")
#mytitle <- paste0(res.ca$title," Inertia Explained"," (",format(res.ca$eig[2,"cumulative percentage of variance"],nsmall=2,digits=2),"%)",sep="")
string <- res.ca$title
mytitle <-  paste0(toupper(substr(string, 1, 1)), substr(string, 2, nchar(string)))
if (is.null(target)) { target <- paste0(res.ca$title,".pptx")}
#si user forgot pptx
if (!(grepl("\\.pptx$", target))) {target <- paste0(target,".pptx")}
if (usetemplate) {
doc_pptx <-officer::read_pptx(system.file(package = "HelpMe", "template/templateISC.pptx")) %>%
officer::add_slide(layout = "TitleContent", master = "Custom Design") %>%
officer::ph_with( mytitle, location= ph_location_label(ph_label = "Title 4")) %>%
officer::ph_with(rvg::dml(ggobj =  HelpMe:::plot_ISCA(res.ca, max.overlaps = max.overlaps)),
location=ph_location_label(ph_label = "Content Placeholder 2"))  %>%
officer::remove_slide(index = 1)
} else {
doc_pptx <- officer::read_pptx() %>%
officer::add_slide(layout = "Title and Content", master = "Office Theme") %>%
officer::ph_with(mytitle, location= officer::ph_location_type(type = "title")) %>%
officer::ph_with(rvg::dml(ggobj =  HelpMe:::plot_ISCA(res.ca,max.overlaps = max.overlaps)),
location=officer::ph_location_type(type="body"))
}
if (is.null(folder)) {
print(doc_pptx, target)}
else {print(doc_pptx, file.path(folder,target))}
}
setwd("I:\\SAS_MS\\23-006424-01\\maps")
rm(res.ca)
res.ca <- create_CA("germany.csv")
export_CA(res.ca, folder = "test")
if (check_pptx()) {save_CA_pptx(res.ca, "test/germanytest")}
if (check_pptx()) {save_CA_pptx(res.ca, "test/germanytest", usetemplate = TRUE)}
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
library(HelpMe)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(HelpMe)
res.ca <- HelpMe::create_CA("child_red.csv")
HelpMe::export_CA(res.ca)
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, "child_red.pptx")}
res.ca <- HelpMe::create_CA("child_red.csv", row.sup = 1, col.sup = 4, title = "MyCA")
dir.create("output")
HelpMe::export_CA(res.ca, "output")
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, target = "Mypptx.pptx", folder = "output", usetemplate = TRUE)}
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
myplots <- HelpMe::run_quadmap("dataquad.csv")
setwd("~/SAS_MS/HelpMe/vignettes")
myplots <- HelpMe::run_quadmap("dataquad.csv")
mylist <- myplots
#check if argumnet 1 is a list
if (!(inherits(mylist, "list"))) {stop("You need a list of plots")}
all_ggplot <- sapply(mylist, function(x) inherits(x, "ggplot"))
if (!(all(all_ggplot))) {
stop("Not all elements are of class ggplot.")
}
all_have_names <- !any(is.null(names(mylist)))
if (!(all_have_names)) {
stop("All elements should have names.")
}
init_pptx <- officer::read_pptx(system.file(package = "HelpMe", "template/templateGG.pptx"))
add_slide_pptx_template <- function(doc_pptx, i, myplots = mylist) {
doc_pptx %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with(names(myplots)[i], location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design")  %>%
officer::ph_with(names(myplots)[i], location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "TitleContent", master = "Custom Design") %>%
officer::ph_with(paste0(names(myplots)[i]," - Leveraging  Strengths and Weaknesses")
, location= ph_location_label(ph_label = "Title 4")) %>%
officer::ph_with(rvg::dml(ggobj = myplots[[i]]),
location=ph_location_label(ph_label = "Content Placeholder 2"))
}
result <- Reduce(add_slide_pptx_template, seq_along(mylist), init = init_pptx)
result <- result %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with("Appendix", location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with("Appendix", location= ph_location_label(ph_label = "Title 4"))
getwd()
target <- "test.pptx"
print(result, target)
##helper function to get 1 pptx with all the quadmaps
###export to pptx needs officer and rvg
library(officer)
library(rvg)
#mylist is a list of plots
save_quadmap_pptx <- function(mylist, target  ) {
#check if argumnet 1 is a list
if (!(inherits(mylist, "list"))) {stop("You need a list of plots")}
all_ggplot <- sapply(mylist, function(x) inherits(x, "ggplot"))
if (!(all(all_ggplot))) {
stop("Not all elements are of class ggplot.")
}
all_have_names <- !any(is.null(names(mylist)))
if (!(all_have_names)) {
stop("All elements should have names.")
}
init_pptx <- officer::read_pptx()  # Votre objet initial
add_slide_pptx <- function(doc_pptx, i, myplots = mylist) {
doc_pptx %>%
officer::add_slide(layout = "Title and Content", master = "Office Theme") %>%
officer::ph_with(names(myplots)[i], location= officer::ph_location_type(type = "title")) %>%
officer::ph_with(rvg::dml(ggobj = myplots[[i]]),
location=ph_location(width=7.35,height=4.65,left=1.22,top=1.80))
}
doc_pptx <- Reduce(add_slide_pptx, seq_along(mylist), init = init_pptx)
print(doc_pptx, target)
}
save_CA_pptx <- function(x, target, folder = NULL, max.overlaps = 10, usetemplate = FALSE){
res.ca <- x
if (!inherits(res.ca, "CA")) stop("non convenient data")
#mytitle <- paste0(res.ca$title," Inertia Explained"," (",format(res.ca$eig[2,"cumulative percentage of variance"],nsmall=2,digits=2),"%)",sep="")
string <- res.ca$title
mytitle <-  paste0(toupper(substr(string, 1, 1)), substr(string, 2, nchar(string)))
if (is.null(target)) { target <- paste0(res.ca$title,".pptx")}
#si user forgot pptx
if (!(grepl("\\.pptx$", target))) {target <- paste0(target,".pptx")}
if (usetemplate) {
doc_pptx <-officer::read_pptx(system.file(package = "HelpMe", "template/templateISC.pptx")) %>%
officer::add_slide(layout = "TitleContent", master = "Custom Design") %>%
officer::ph_with( mytitle, location= ph_location_label(ph_label = "Title 4")) %>%
officer::ph_with(rvg::dml(ggobj =  HelpMe:::plot_ISCA(res.ca, max.overlaps = max.overlaps)),
location=ph_location_label(ph_label = "Content Placeholder 2"))  %>%
officer::remove_slide(index = 1)
} else {
doc_pptx <- officer::read_pptx() %>%
officer::add_slide(layout = "Title and Content", master = "Office Theme") %>%
officer::ph_with(mytitle, location= officer::ph_location_type(type = "title")) %>%
officer::ph_with(rvg::dml(ggobj =  HelpMe:::plot_ISCA(res.ca,max.overlaps = max.overlaps)),
location=officer::ph_location_type(type="body"))
}
if (is.null(folder)) {
print(doc_pptx, target)}
else {print(doc_pptx, file.path(folder,target))}
}
#mylist is a list of plots
save_quadmap_pptx_SL <- function(mylist, target, folder = NULL) {
#check if argumnet 1 is a list
if (!(inherits(mylist, "list"))) {stop("You need a list of plots")}
all_ggplot <- sapply(mylist, function(x) inherits(x, "ggplot"))
if (!(all(all_ggplot))) {
stop("Not all elements are of class ggplot.")
}
all_have_names <- !any(is.null(names(mylist)))
if (!(all_have_names)) {
stop("All elements should have names.")
}
init_pptx <- officer::read_pptx(system.file(package = "HelpMe", "template/templateGG.pptx"))
add_slide_pptx_template <- function(doc_pptx, i, myplots = mylist) {
doc_pptx %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with(names(myplots)[i], location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design")  %>%
officer::ph_with(names(myplots)[i], location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "TitleContent", master = "Custom Design") %>%
officer::ph_with(paste0(names(myplots)[i]," - Leveraging  Strengths and Weaknesses")
, location= ph_location_label(ph_label = "Title 4")) %>%
officer::ph_with(rvg::dml(ggobj = myplots[[i]]),
location=ph_location_label(ph_label = "Content Placeholder 2"))
}
# Votre objet initial
result <- Reduce(add_slide_pptx_template, seq_along(mylist), init = init_pptx)
result <- result %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with("Appendix", location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with("Appendix", location= ph_location_label(ph_label = "Title 4"))
if (!(grepl("\\.pptx$", target))) {target <- paste0(target,".pptx")}
if (is.null(folder)) {
print(result, target)}
else {print(result, file.path(folder,target))}
}
setwd("~/SAS_MS/HelpMe/vignettes")
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 6)
View(myplots)
myplots
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 6, max.overlaps = 15)
myplots
save_quadmap_pptx_SL(myplots,"myquadmap.pptx")
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 10, max.overlaps = 15)
save_quadmap_pptx_SL(myplots,"myquadmap2.pptx")
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 6, max.overlaps = 10)
save_quadmap_pptx_SL(myplots,"myquadmap2.pptx")
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 6, max.overlaps =5)
save_quadmap_pptx_SL(myplots,"myquadmap2.pptx")
myplots <- HelpMe::run_quadmap("dataquad.csv",force = 6, max.overlaps =7)
save_quadmap_pptx_SL(myplots,"myquadmap2.pptx")
file.path(Sys.getenv("HOME"), ".Rprofile")
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
library("devtools")
load_all()
document()
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
build()
install.packages("~/SAS_MS/HelpMe_2.1.5.tar.gz", repos = NULL, type = "source")
library(HelpMe)
View(save_quadmap_pptx)
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
library("devtools")
load_all()
document()
check()
library("devtools")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
remove.packages("HelpMe")
install.packages("~/SAS_MS/HelpMe_2.1.5.tar.gz", repos = NULL, type = "source")
library(HelpMe)
setwd("~/SAS_MS")
setwd("~/SAS_MS/test")
res.ca <- HelpMe::create_CA("global.csv")
remove.packages("HelpMe")
res.ca
install.packages("~/SAS_MS/HelpMe_2.1.5.tar.gz", repos = NULL, type = "source")
rm(res.ca)
res.ca <- HelpMe::create_CA("global.csv")
HelpMe::export_CA(res.ca, folder = "NewMaps")
HelpMe::export_CA(res.ca)
View(save_CA_pptx)
res.ca$PM_coord
df_data <- res.ca$PM_coord
row.names(df_data)
df_data[which(df_data$Type)=="Brand"]
df_data[which(df_data$Type=="Brand")]
df_data[which(df_data$Type=="Brand"),]
rownames(df_data[which(df_data$Type=="Brand"),])
grep("\\."," " , df_data[which(df_data$Type=="Brand"),])
sub("\\."," " , df_data[which(df_data$Type=="Brand"),])
sub("\\."," " , rowname(df_data[which(df_data$Type=="Brand"),])
)
sub("\\."," " , rownames(df_data[which(df_data$Type=="Brand"),]))
gsub("\\."," " , rownames(df_data[which(df_data$Type=="Brand"),]))
rownames(df_data[which(df_data$Type=="Brand"),]) <- gsub("\\."," " , rownames(df_data[which(df_data$Type=="Brand"),]))
rownames(df_data)
a <- rownames(df_data[which(df_data$Type=="Brand"),])
b <- rownames(df_data[which(df_data$Type!="Brand"),])
a<- gsub("\\.", " ",a)
a
rowname(df_data) <- c(a,b)
rownames(df_data) <- c(a,b)
df_data
df_data <- res.ca$PM_coord
df1 <- dfdata[which(df_data$Type=="Brand"),]
df2 <- dfdata[which(df_data$Type!="Brand"),]
rownames(df1) <- gsub("//.", " ", rownames(df1))
df1 <- dfdata[which(df_data$Type=="Brand"),]
df2 <- dfdata[which(df_data$Type!="Brand"),]
rownames(df1) <- gsub("//.", " ", rownames(df1))
df1 <- df_data[which(df_data$Type=="Brand"),]
df2 <- df_data[which(df_data$Type!="Brand"),]
rownames(df1) <- gsub("//.", " ", rownames(df1))
df_data <- rbind(df1,df2)
df_data
rownames(df1)
rownames(df1) <- gsub("\\.", " ", rownames(df1))
rownames(df1)
remove.packages("HelpMe")
library("devtools")
load_all()
setwd("~/SAS_MS/HelpMe")
load_all()
document()
devtools::build_rmd("vignettes/how_to_Perceptual_Maps.Rmd")
devtools::build_rmd("vignettes/How_to_Quadmap.Rmd")
check()
build()
install.packages("~/SAS_MS/HelpMe_2.1.5.tar.gz", repos = NULL, type = "source")
setwd("~/SAS_MS/test")
rm(res.ca)
res.ca <- HelpMe::create_CA("global.csv")
HelpMe::export_CA(res.ca)
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, "india.pptx")}
rm(res.ca)
res.ca <- HelpMe::create_CA("global.csv")
HelpMe::export_CA(res.ca)
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, "india.pptx")}
setwd("~/SAS_MS/HelpMe")
library("devtools")
load_all()
document()
check()
remove.packages("HelpMe")
install.packages("~/SAS_MS/HelpMe_2.1.6.tar.gz", repos = NULL, type = "source")
build()
install.packages("~/SAS_MS/HelpMe_2.1.6.tar.gz", repos = NULL, type = "source")
setwd("~/SAS_MS/test")
rm(res.ca)
res.ca <- HelpMe::create_CA("global.csv")
HelpMe::export_CA(res.ca)
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, "global.pptx")}
library(bigrquery)
library(dplyr)
con <- dbConnect(
bigrquery::bigquery(),
project = "bigquery-public-data",
dataset = "usa_names.usa_1910_current",
billing = "mgcp-1192365-ips-wm-md-srf818"
)
# Store the project ID
projectid = 'mgcp-1192365-ips-wm-md-srf818'
# Store the project ID
projectid = 'mgcp-1192365-ips-wm-md-srf818'
# Set your query
sql <- "SELECT * FROM `bigquery-public-data.usa_names.usa_1910_current` LIMIT 10"
# Run the query; this returns a bq_table object that you can query further
tb <- bq_project_query(projectid, sql)
# Store the first 10 rows of the data in a tibble
sample <-bq_table_download(tb, n_max = 10)
# Print the 10 rows of data
sample
library(bigrquery)
library(dplyr)
con <- dbConnect(
bigrquery::bigquery(),
project = "bigquery-public-data",
dataset = "usa_names.usa_1910_current",
billing = "mgcp-1192365-ips-wm-md-srf818"
)
# Store the project ID
projectid = 'mgcp-1192365-ips-wm-md-srf818'
# Set your query
sql <- "SELECT * FROM `mgcp-1192365-ips-wm-md-srf818.WM_FT_Dataset.tblMetricMap` LIMIT 10;"
# Run the query; this returns a bq_table object that you can query further
tb <- bq_project_query(projectid, sql)
# Store the first 10 rows of the data in a tibble
sample <-bq_table_download(tb, n_max = 10)
# Print the 10 rows of data
sample
var_constant <- c('respondentUUID','Country','Weight','Wave2','Age_Recode',"Unique_ID_SPSS")
var_demo <-  c("BRANDASSIGNMENT","Familiarity")
var_targets <- c("CurrentViewing","FutureViewing","Momentum","Affinity","CurrentUsage","FutureUsage",
"CurrentEngagment","FutureEngagment","PastBrandSpend","FuturePurchase","FutureSubscriptionIntent",
"BrandPerformance")
code_touchpoints <- seq(1,36,1)
code_attributes = seq(1,77,1)
code  <- 208
nwcode = paste0("_",code)
var_demo_code  = paste0(var_demo,nwcode)
var_targets_code =  paste0(var_targets,nwcode)
var_touchpoints_code = paste0(paste0("Touchpoints",nwcode, "_"),code_touchpoints)
var_attributes_code  =  paste0(paste0("Attributes",nwcode, "_"),code_attributes)
var_to_select = c(var_constant ,var_demo_code , var_targets_code , var_touchpoints_code , var_attributes_code)
whereclause= f"""WHERE  Country='{country}'  AND Wave2 ='Yes' AND BRANDASSIGNMENT_{code} = 'Yes' ORDER BY Unique_ID_SPSS DESC"""
return(var_to_select, whereclause)
library(bigrquery)
library(dplyr)
con <- dbConnect(
bigrquery::bigquery(),
project = "bigquery-public-data",
dataset = "usa_names.usa_1910_current",
billing = "mgcp-1192365-ips-wm-md-srf818"
)
# Store the project ID
projectid = 'mgcp-1192365-ips-wm-md-srf818'
# Set your query
sql <- "SELECT * FROM `mgcp-1192365-ips-wm-md-srf818.WM_FT_Dataset.tblMetricMap` LIMIT 10;"
# Run the query; this returns a bq_table object that you can query further
tb <- bq_project_query(projectid, sql)
# Store the first 10 rows of the data in a tibble
sample <-bq_table_download(tb, n_max = 10)
# Print the 10 rows of data
sample
rm(list=ls())
library(bigrquery)
library(dplyr)
# Store the project ID
projectid = 'mgcp-1192365-ips-wm-md-srf818'
# Set your query
sql <- "SELECT * FROM `mgcp-1192365-ips-wm-md-srf818.WM_FT_Dataset.tblMetricMap` LIMIT 10;"
# Run the query; this returns a bq_table object that you can query further
tb <- bq_project_query(projectid, sql)
# Store the first 10 rows of the data in a tibble
sample <-bq_table_download(tb, n_max = 10)
# Print the 10 rows of data
sample
library(bigrquery)
library(dplyr)
# Store the project ID
projectid = 'mgcp-1192365-ips-wm-md-srf818'
# Set your query
sql <- "SELECT * FROM `mgcp-1192365-ips-wm-md-srf818.WM_FT_Dataset.tblMetricMap` LIMIT 10;"
# Run the query; this returns a bq_table object that you can query further
tb <- bq_project_query(projectid, sql)
# Store the first 10 rows of the data in a tibble
sample <-bq_table_download(tb, n_max = 10)
# Print the 10 rows of data
sample
library(HelpMe)
rm(res.ca)
res.ca <- HelpMe::create_CA("global.csv")
HelpMe::export_CA(res.ca)
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, "global.pptx")}
View(save_CA_pptx)
HelpMe::export_CA()
HelpMe::export_CA
View(save_CA_pptx)
rm(res.ca)
setwd("~/SAS_MS/test")
rm(res.ca)
res.ca <- HelpMe::create_CA("global.csv")
HelpMe::export_CA(res.ca)
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, "global1.pptx")}
rm(res.ca)
rm(res.ca)
res.ca <- HelpMe::create_CA("americas.csv")
HelpMe::export_CA(res.ca)
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, "americas.pptx")}
file <- "J:\\23-041954-01\\quadmap1.csv"
myplots <- HelpMe::run_quadmap(file)
if (HelpMe::check_pptx()) {save_quadmap_pptx(myplots,"myquadmap.pptx")}
getwd()
View(save_CA_pptx)
