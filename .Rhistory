geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme_ipsum() +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(base_family = "serif") +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(base_family = "") +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
inputData <- read.csv(file = inputFile, encoding = "latin1") %>%
select(Driver,TB0,Category)
j<- 2
nbbrand <- 1
library(ggplot2)
library(extrafont)
loadfonts(device = "win")
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(text=element_text(size=16,  family="Comic Sans MS")) +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
windows()
myFont1 <- "Montserrat"
myFont2 <- "Roboto"
myFont3 <- "Palatino"
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(text=element_text(size=16,  family=myFont2)) +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(text=element_text(family="mono"))
myplot <- ggplot(inputData, aes(x = inputData[, 2], y = inputData[, 3])) +
theme(text=element_text(family="mono")) +
geom_rect(
aes(xmin = mean(inputData[, 2]), xmax = Inf,
ymin = mean(inputData[, 3]), ymax = Inf),
fill = "mediumseagreen"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = mean(inputData[, j + nbbrand]), ymax = Inf),
fill = "lightgreen"
) +
geom_rect(
aes(xmin = mean(inputData[, j]), xmax = Inf,
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "sandybrown"
) +
geom_rect(
aes(xmin = -Inf, xmax = mean(inputData[, j]),
ymin = -Inf, ymax = mean(inputData[, j + nbbrand])),
fill = "lightcoral"
) +
geom_vline(
aes(xintercept = mean(inputData[, j])),
color = "grey50", alpha = 0.5
) +
geom_hline(
aes(yintercept = mean(inputData[, j + nbbrand])),
color = "grey50", alpha = 0.5
) +
geom_point(size = 2, color = "navy") +
geom_text_repel(aes(label = inputData[, 1]), size = 2.5, box.padding = unit(0.35, "lines"),force = 10
) +
theme(axis.title = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)) +
labs(x = "Attribute Performance", y = "Attribute Importance") +
scale_x_continuous(breaks = c(min(inputData[,j]),max(inputData[,j])),
labels = function(a) sprintf("%.1f%%", round(a, digits = 2))) +
scale_y_continuous(breaks = c(min(inputData[,j + nbbrand]),max(inputData[,j + nbbrand])),
labels = function(a) sprintf("%.2f", round(a, digits = 2)))
myplot
rm(list=ls())
library(devtools)
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::build()
devtools::install()
detach("package:HelpMe", unload = TRUE)
detach("package:HelpMe", unload = TRUE)
devtools::install()
install.packages("~/SAS_MS/HelpMe_3.2.0.tar.gz", repos = NULL, type = "source")
remove.packages("HelpMe")
install.packages("~/SAS_MS/HelpMe_3.2.0.tar.gz", repos = NULL, type = "source")
devtools::install()
library(HelpMe)
myplots <- run_quadmap("J:\\sas_ms\\22-071458-02\\H2\\AR1_2\\quadmap.csv",max.overlaps = Inf)
myplots
save_quadmap_mypptx(myplots,file.path("C:\\Users\\Sandrine.Lebon01\\MAIN\\usatibn\\AR1_2","test.pptx"))
devtools::load_all()
devtools::build()
remove.packages("HelpMe")
install.packages("~/SAS_MS/HelpMe_3.2.0.tar.gz", repos = NULL, type = "source")
devtools::install()
library(HelpMe)
myplots <- run_quadmap("J:\\sas_ms\\22-071458-02\\H2\\AR1_2\\quadmap.csv",max.overlaps = Inf)
save_quadmap_mypptx(myplots,file.path("C:\\Users\\Sandrine.Lebon01\\MAIN\\usatibn\\AR1_2","test2.pptx"))
getwd()
#' Title
#'
#' @param file_csv file name or could be path
#' @param folder path for file name
#' @param isHE is it an HE
#' @param masterbrand masterbrand pour HE
#' @param force argument pour ggrepel
#' @param max.overlaps argument pour ggrepel
#'
#' @return
#' @export
#'
#' @examples
run_quadmap <- function(file_csv, folder= NULL, isHE = FALSE, TBdetail = "T2B",
masterbrand = NULL, force = 10, max.overlaps = 10){
df <- read.file(file_csv, folder)
df_list <- split_data_frame(df)
plots <- lapply(df_list, function(df) myplot_quadmap(df, isHE, masterbrand, force, TBdetail,max.overlaps ))
# Set the names of the list elements based on the last column of each dataframe
plots <- stats::setNames(plots, sapply(df_list, function(df) utils::tail(names(df), n = 1)))
return(plots)
}
run_quadmap_BG <- function(file_csv, folder= NULL, isHE = FALSE, TBdetail = "T2B",
masterbrand = NULL, force = 10, max.overlaps = 10){
df <- read.file(file_csv, folder)
df_list <- split_data_frame(df)
plots <- lapply(df_list, function(df) myplot_quadmap_BG(df, isHE, masterbrand, force, TBdetail,max.overlaps ))
# Set the names of the list elements based on the last column of each dataframe
plots <- stats::setNames(plots, sapply(df_list, function(df) utils::tail(names(df), n = 1)))
return(plots)
}
library(devtools)
rm(list=ls())
library(devtools)
devtools::load_all()
devtools::document()
devtools::check()
devtools::build()
library(devtools)
library(reticulate)
use_python("/opt/homebrew/bin/python3", required = TRUE)
library(reticulate)
use_python("/opt/homebrew/Caskroom/miniconda/base/bin/python3", required = TRUE)
use_python("/opt/homebrew/Caskroom/miniconda/base/bin/python3", required = TRUE)
library(reticulate)
use_python("/opt/homebrew/Caskroom/miniconda/base/bin/python3", required = TRUE)
library(devtools)
devtools::build()
devtools::load_all()
library(HelpMe)
use_python("/opt/homebrew/Caskroom/miniconda/base/bin/python3", required = TRUE)
library(reticulate)
use_python("/opt/homebrew/Caskroom/miniconda/base/bin/python3", required = TRUE)
library(HelpMe)
library(devtools)
devtools::load_all()
devtools::check()
View(save_quadmap_mypptx)
View(save_plot_pptx)
##helper function to get 1 pptx with all the quadmaps
###export to pptx needs officer and rvg
library(officer)
library(rvg)
#mylist is a list of plots
custom_pptx <- function(mylist, use_template = FALSE) {
#check if argumnet 1 is a list
if (!(inherits(mylist, "list"))) {stop("You need a list of plots")}
all_ggplot <- sapply(mylist, function(x) inherits(x, "ggplot"))
if (!(all(all_ggplot))) {
stop("Not all elements are of class ggplot.")
}
all_have_names <- !any(is.null(names(mylist)))
if (!(all_have_names)) {
stop("All elements should have names.")
}
if (use_template) {
init_pptx <- officer::read_pptx(system.file(package = "HelpMe", "template/templateGG.pptx"))
add_slide_pptx_template <- function(doc_pptx, i, myplots = mylist) {
doc_pptx %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with(names(myplots)[i], location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design")  %>%
officer::ph_with(names(myplots)[i], location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "TitleContent", master = "Custom Design") %>%
officer::ph_with(paste0(names(myplots)[i]," - Leveraging  Strengths and Weaknesses")
, location= ph_location_label(ph_label = "Title 4")) %>%
officer::ph_with(rvg::dml(ggobj = myplots[[i]]),
location=ph_location_label(ph_label = "Content Placeholder 2"))
}
# Votre objet initial
result <- Reduce(add_slide_pptx_template, seq_along(mylist), init = init_pptx)
result <- result %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with("Appendix", location= ph_location_label(ph_label = "Title 4")) %>%
officer::add_slide(layout = "OnlyTitle", master = "Custom Design") %>%
officer::ph_with("Appendix", location= ph_location_label(ph_label = "Title 4"))
} else {
init_pptx <- officer::read_pptx()  # Votre objet initial
add_slide_pptx <- function(doc_pptx, i, myplots = mylist) {
doc_pptx %>%
officer::add_slide(layout = "Title and Content", master = "Office Theme") %>%
officer::ph_with(names(myplots)[i], location= officer::ph_location_type(type = "title")) %>%
officer::ph_with(rvg::dml(ggobj = myplots[[i]]),
location=officer::ph_location_type(type="body"))
}
result <- Reduce(add_slide_pptx, seq_along(mylist), init = init_pptx)
}
return(result)
}
save_plot_pptx <- function(x, target = NULL, max.overlaps = 10, usetemplate = FALSE){
res.ca <- x
if (!inherits(res.ca, "CA")) stop("non convenient data")
mytitle <- paste0(res.ca$title," Inertia Explained"," (",format(res.ca$eig[2,"cumulative percentage of variance"],nsmall=2,digits=2),"%)",sep="")
if (is.null(target)) { target <- paste0(res.ca$title,".pptx")}
if (usetemplate) {
doc_pptx <-officer::read_pptx(system.file(package = "HelpMe", "template/templateISC.pptx")) %>%
officer::add_slide(layout = "TitleContent", master = "Custom Design") %>%
officer::ph_with( mytitle, location= ph_location_label(ph_label = "Title 4")) %>%
officer::ph_with(rvg::dml(ggobj =  HelpMe:::plot_ISCA(res.ca, max.overlaps = max.overlaps)),
location=ph_location_label(ph_label = "Content Placeholder 2"))  %>%
officer::remove_slide(index = 1)
} else {
doc_pptx <- officer::read_pptx() %>%
officer::add_slide(layout = "Title and Content", master = "Office Theme") %>%
officer::ph_with(mytitle, location= officer::ph_location_type(type = "title")) %>%
officer::ph_with(rvg::dml(ggobj =  HelpMe:::plot_ISCA(res.ca,max.overlaps = max.overlaps)),
location=officer::ph_location_type(type="body"))
}
print(doc_pptx, target)
}
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
devtools::build()
HelpMe::check_pptx()
library(HelpMe)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(HelpMe)
df <-read.csv("dataquad.csv")
df[,c(1:3,9:10)]
df[,c(1:3,9:10)]
myplots <- HelpMe::run_quadmap("dataquad.csv")
if (HelpMe::check_pptx()) {save_quadmap_pptx(myplots,"myquadmap.pptx")}
library(HelpMe)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(HelpMe)
res.ca <- HelpMe::create_CA("child_red.csv")
HelpMe::export_CA(res.ca)
if (HelpMe::check_pptx()) {save_CA_pptx(res.ca, "child_red.pptx")}
res.ca <- HelpMe::create_CA("child_red.csv")
# first show original map
HelpMe:::plot_ISCA(res.ca)
# example on Dim 1
# extract the data for the map from the objevct res.ca
df <- res.ca$PM_coord
df$`Dim 1` <- -1 *df$`Dim 1` #flip
#resave the correct coordinates into the object res.ca
res.ca$PM_coord <- df
# plot the new map
HelpMe:::plot_ISCA(res.ca)
#export the coordinates used for the flipped map
HelpMe::export_CA(res.ca)
getwd()
res.ca <- HelpMe::create_CA("child_red.csv", row.sup = 1, col.sup = 4, title = "MyCA")
dir.create("output")
HelpMe::export_CA(res.ca, "output")
HelpMe:::plot_ISCA(res.ca)
View(save_plot_pptx)
View(save_plot_pptx)
library(HelpMe)
